using Serilog;
using Serilog.Events;

public static class AppLogger
{
    // Инициализация логгера (вызывать один раз при старте приложения)
    public static void InitLogger()
    {
        Log.Logger = new LoggerConfiguration()
            .MinimumLevel.Information()
            .Enrich.FromLogContext()
            .WriteTo.Console()
            .WriteTo.File("logs/log-.txt", rollingInterval: RollingInterval.Day)
            .CreateLogger();
    }

    // Быстрые методы для логирования разных уровней
    public static void Info(string message, params object[] args)
    {
        Log.Information(message, args);
    }

    public static void Debug(string message, params object[] args)
    {
        Log.Debug(message, args);
    }

    public static void Warning(string message, params object[] args)
    {
        Log.Warning(message, args);
    }

    public static void Error(string message, params object[] args)
    {
        Log.Error(message, args);
    }

    public static void Fatal(string message, params object[] args)
    {
        Log.Fatal(message, args);
    }

    // Метод для логирования исключений с сообщением
    public static void Error(Exception ex, string message, params object[] args)
    {
        Log.Error(ex, message, args);
    }

    // Вызвать при завершении приложения для корректного закрытия логгера
    public static void CloseAndFlush()
    {
        Log.CloseAndFlush();
    }
}
